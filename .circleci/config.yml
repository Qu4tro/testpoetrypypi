version: 2.1

jobs:
  build_and_test:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Check environment
          command: |
            python --version
            pip --version
            ls -la
      - run:
          name: Build and test
          command: |
            pip install poetry
            poetry install -v
            poetry run pytest

  version_check:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Build and test
          command: |
            pip install poetry
            poetry install
      - run:
          name: Semantic Release no-op
          command: |
            poetry run semantic-release version --noop -Dversion_source=${SEM_REL_VERSION_SOURCE} -Dversion_variable=${SEM_REL_VERSION_VARIABLE}

  release:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Build and test
          command: |
            pip install poetry
            poetry install
            poetry run pytest
      - add_ssh_keys:
          fingerprints:
            - "${GH_DEPLOY_KEY_FINGERPRINT}"
      - run:
          name: Do legit release
          command: |
            git config --global user.email "${GH_USER_EMAIL}"
            git config --global user.name "${GH_USER}"

            # poetry run semantic-release version
            # note running this command alone seems to produce the tag (but we still need to push it)
            poetry run semantic-release version -Dversion_source=${SEM_REL_VERSION_SOURCE} -Dversion_variable=${SEM_REL_VERSION_VARIABLE}

            echo "python show version after semantic-release version command:"
            python semantic_release/__init__.py
            new_version=$(python semantic_release/__init__.py)
            
            if [[ $new_version == '0.0.0' ]]; then
                echo "new_version is default value"
                exit 0  # exit (without failing) so as to not publish
            fi

            echo "version in pyproject.toml before updating:"
            poetry version  #show version

            # update pypoetry.toml with the $new_version from semantic-release
            poetry version $new_version

            echo "version in pyproject.toml after updating:"
            poetry version  #show version

            # build the package for release
            poetry build
            
            # Publish package to PyPI
            poetry publish --username $PYPI_USERNAME --password $PYPI_PASSWORD

            echo "git push the new tag:"
            git push origin v${new_version}

workflows:
  version: 2
  build_test_release:
    jobs:
      - build_and_test
      - version_check
      # - version_check:
          # context: undefined
          # filters:
          #   branches:
          #     only: master
      - release:
          # context: undefined
          requires:
            - version_check
            - build_and_test
          filters:
            branches:
              only: master

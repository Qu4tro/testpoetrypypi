version: 2.1

commands:
  build_command:
    description: build and test

    steps:

      - run:
          name: Where am I?
          command: pwd

      - checkout
      
      - run:
          name: Where am I?
          command: pwd

      - run:
          name: See result of checkout
          command: ls -la

      - run:
          name: Install Poetry
          command: pip install poetry
      - run:
          name: Install
          command: poetry install -v

      - run:
          name: See result of install
          command: ls -la

      - persist_to_workspace:
          root: .
          paths:
            - .

jobs:
  build:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo
    steps:
      - run:
          name: Check environment
          command: |
            python --version
            pip --version
            ls -la
      - build_command

  test:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo
    steps:
      - run:
          name: See what I have before attaching workspace
          command: ls -la
      - attach_workspace:
          at: ~/repo
      - run:
          name: See what I have after attaching workspace
          command: ls -la
      # I need to re-install the dependencies, but I don't have to re-checkout the code because I persisted it all to the workspace
      # but the dependencies were installed into a virtualenv in some mystery location so were not persisted.
      - run:
          name: Install dependencies 
          command: poetry install -v
      - run:
          name: Test
          command: poetry run pytest

  # version_check:
  #   docker:
  #     - image: circleci/python:3.7
  #   steps:
  #     - build_command
  #     - run:
  #         name: Semantic Release no-op
  #         command: poetry run semantic-release version --noop
  #           # poetry run semantic-release version --noop -Dversion_source=${SEM_REL_VERSION_SOURCE} -Dversion_variable=${SEM_REL_VERSION_VARIABLE}
  #           # poetry run semantic-release version --noop

  release:
    docker:
      - image: circleci/python:3.7
    steps:
      - build_command
      - run:  # extract out another command? Or make this it's own job?
          name: Test
          command: poetry run pytest

      - add_ssh_keys
      - run:
          name: Release
          command: |
            # these seem to be required (by semantic-release) even when using version_source="tag"
            git config --global user.email "${GH_USER_EMAIL}"
            git config --global user.name "${GH_USER}"

            # note running this command alone seems to produce the tag (but we still need to push it)
            # poetry run semantic-release version -Dversion_source=${SEM_REL_VERSION_SOURCE} -Dversion_variable=${SEM_REL_VERSION_VARIABLE}
            poetry run semantic-release version

            echo "python show version after semantic-release version command:"
            python semantic_release/__init__.py
            new_version=$(python semantic_release/__init__.py)
            
            if [[ $new_version == '0.0.0' ]]; then
                echo "new_version is default value"
                exit 0  # exit (without failing) so as to not publish
            fi

            echo "version in pyproject.toml before updating:"
            poetry version  #show version

            # update pypoetry.toml with the $new_version from semantic-release
            poetry version $new_version

            echo "version in pyproject.toml after updating:"
            poetry version  #show version

            # build the package for release
            poetry build
            
            echo "git push the new tag:"
            git push origin v${new_version}

            # Publish package to PyPI
            poetry publish --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  version: 2
  build_test_release:
    jobs:
      - build
      - test:
          requires:
            - build
      # - version_check
      # - version_check:
          # context: undefined
          # filters:
          #   branches:
          #     only: master

      - release:
          # context: undefined
          requires:
            - build
            - test
          filters:
            branches:
              only: master
